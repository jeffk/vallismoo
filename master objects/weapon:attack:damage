@property $weapon.attack_stat #370 "r" me@property $weapon.required_strength 25 "r" me@property $weapon.required_hands 1 "r" me@property $weapon.attack_bonus 0 "r" me@property $weapon.parry_mod 0 "r" me@property $weapon.wield_speed 5 "r" me@property $weapon.attack_types {} "r" me@property $weapon.special_skill #-1 "r" me@property $weapon.quality 50 "r" me@property $weapon.deterioration 0 "r" me@property $weapon.ability_stat #336 "r" me@property $attack.damage 10 "r" me@property $attack.damage_type #-1 "r" me@property $attack.fatigue 1 "r" me@property $attack.damage_stat #304 "r" me@property $attack.attack_stat #305 "r" me@property $attack.ability_stat #-1 "r" me@property $damage.type "injury" "r" me@verb $attack:special_damage(attacker,target,weapon,attack,body_area)@prog $attack:special_damage":special_damage(attacker,target,weapon,attack,body_area);";"The place for all the special stuff, like decapitation!";return(0);.@verb $weapon:do_attack(attacker,target,weapon,*body_area)attack = this.attack_types[random(length(this.attack_types))];myattack = 0;if (player:hands() <= attack.hands_required)  for attack in (this.attack_types)    if (player:hands() >= attack.hands_required)       myattack = attack;    endif  endforelse  myattack = attack;endifif (myattack == 0)  player:tell("You don't seem to be able to use your ",this.name," effectively with your free hands!");  return(0);endifreturn(myattack:do_attack(@args));@verb $attack:do_attack(attacker,target,weapon,*body_area)if (this.damage_type == #-1)  return(0);elseif(args[1].location != args[2].location)  args[1]:tell("You don't seem to be able to find ",args[2].name," around here.");  return;else  attacker = args[1];  target = args[2];  weapon = args[3];  myroll = this:roll_attack(@args);  if (args[4] == 0)    calledshot = 0;    body_area = target:random_body_area();  else    body_area = args[4];    calledshot = 1;  endif  this:announce_attack(attacker,target,weapon,body_area);  {results,defroll} = target:do_defend(attacker,target,weapon,calledshot,body_area,myroll,this,this.damage_type);  player:tell("myroll: ",myroll);  player:tell("defroll: ",defroll);  attacker:take_fatigue(this.fatigue);  if(results == "parry")    weapon:maybe_deteriorate(defroll-myroll);    weapon:maybe_boost(target,attacker,weapon,#341);  elseif(results == "dodge")    weapon:maybe_boost(target,attacker,weapon,#340);  elseif(results == "hit")    damage = ttldamage = this:get_damage(attacker,target,weapon,body_area);    damtype = this.damage_type;    injurytype = damtype.type;    "Ok, ok, they suck.  Lets see if they can soak any of this damage that's coming.";    armor = target:clothing(body_area);    for layer in (armor)      damage = layer:soak(damage,damtype);    endfor    if ((ttldamage > damage) && (damage < 10))      armor[1]:announce_soak(target,attacker,weapon,body_area);    else      target:announce_hit(target,attacker,weapon,body_area,this);    endif    weapon:maybe_deteriorate(myroll-defroll);    weapon:maybe_boost(attacker,target,weapon,this.ability_stat);    target:take_damage(damage,body_area,damtype);  endifendif@verb $attack:roll_attack(attacker,target,weapon,*body_area)attacker = args[1];target = args[2];weapon = args[3];if (args[4] != 0)  called = 1;  body_area = args[4];  mods = (weapon.attack_bonus - weapon.deterioration + (attacker:get_stat(weapon.special_skill)/2)) + body_area.called_shot_mod;else  mods = weapon.attack_bonus - weapon.deterioration + (attacker:get_stat(weapon.special_skill)/2);endifreturn(attacker:resolve_roll({this.attack_stat,this.ability_stat},mods,0));@verb $combatant:do_defend(attacker,target,weapon,calledshot?,*body_area,attackers roll,attack,damage_type)roll1 = roll2 = 0;attacker = args[1];target = args[2];weapon = args[3];called = args[4];body_area = args[5];attroll = args[6];attack = args[7];damage_type = args[8];mydodge = this:get_stat(#340);mydex = this:get_stat(#305);myparry = this:get_stat(#341);wielded = this:wielding();dodgemod = 0;if (wielded != {})  parrymod = 0;  parryweapon = wielded[1];  for wield in (wielded)    if (wield.parry_mod > parrymod)      parryweapon = wield;      parrymod = parryweapon.parry_mod + this:get_stat(parryweapon.special_skill)/4;      parrymod = parrymod + attack.parry_against_mod;    endif  endfor  roll1 = this:resolve_roll({#341,#305},parrymod,0);  "We parried the bastards!";  if (roll1 >= attroll)    parryweapon:announce_parry(target,attacker,weapon);    parryweapon:maybe_deteriorate(roll1-attroll);    return({"parry",roll1});  endif  dodgemod = -10;endifroll2 = this:resolve_roll({#340,#305},dodgemod,0);"We dodged the bastards!";if (roll2 >= attroll)  player:announce_dodge(target,attacker,weapon);  return({"dodge",roll2});endifreturn({"hit",roll2});attack types (for permission checks, defined on weapon)------------magical (#369), bladed (#370), blunt (#371), brawl (#372), natural (#373), and ranged (#374)attacks (defines damage, damage type, stat used for damage calculation,stat used for attack calculation, ability stat used for attack calculation,and fatigue caused by weapon use) (defined on weapon)-------blade slash (#376) damage types (for armor checks, and messages)------------heat (#360), cold (#361), poison (#362), puncture (#363), cut (#364), chop (#365), and impact (#366)$species:get_damage_message($damage_type,$body_area);":get_message(damage_type,body_area)";"Returns a painful message for the type of damage.";for message in (this.damage_messages)  if ($object_utils:isa(args[1],message[1][1]) && $object_utils:isa(args[2],message[1][2]))    return(message[2]);  endifendforreturn("");$attack:get_damage(attacker,target,weapon,body_area);":get_damage(attacker,target,weapon,body_area);";"Total up our damage, grabbing it from several places and returning it as an int.";mod = args[4]:damage_mod();damage = args[3].damage_bonus + this.damage + (args[1]:get_stat(this.damage_stat)/5);damage = random(damage) + args[1]:get_stat(args[3].special_skill)/4;damage = (mod * damage)/100;damage = damage + tonum(this:special_damage(args[1],args[2],args[3],this,args[4]));return(damage);$weapon:maybe_boost":maybe_boost(us,target,weapon,stat);";"Possibly give us a boost in this stat.";stat = args[4];us = args[1];target = args[2];weapon = args[3];mystat = us:get_raw_stat(stat);tarstat = target:get_raw_stat(stat);dif = tarstat - mystat;if (dif < 1)  per = 0.5;elseif (dif < tarstat/2)  per = 1.0;else  per = 1.5;endifreturn(us:might_boost_stat(stat,per));#see if we missed them -exit with dodge#see if we parried -exit with parry -apply deterioration#see if we hit armor -exit with armor -apply deterioration to armor  -overflow to player#see if we hit player -exit with player damage -apply deterioration to weapon -apply damage to player  -check for knockout/kill   -modify karma   -modify reputation$combatant:take_damage(damage,body_area,damage_type)":take_damage(damage,body_area,damage_type)";"Take our damage,and like it!";damage = args[1];damage_type = args[3];body_area = args[2];if (damage_type.type == "injury")  return(this:take_injury(@args));elseif(damage_type.type == "fatigue")  return(this:take_fatigue(@args));elseif(damage_type.type == "drain")  return(this:take_drain(@args));endif$combatant:take_injury":take_injury(damage,body_area);";"This is where we plug in our damage code.  What actually does the hurtin.";this:tell("Taking ",args[1]," points of damage.");damage = args[1];damage_type = args[3];body_area = args[2];res = body_area:get_resistance(damage_type) + this:get_resistance(damage_type);dam = damage - res;if (dam < 1)"We pretty much soaked it all.";  return(1);else  if (dam <5)    return(this:take_fatigue(dam));  else    this.injury = this.injury + dam;    if (this.injury > 100)      this:die();    endif  endifendif.$combatant:die":die()";"Pick up our toys and go home.";this:tell("Ack!  You just died!  Kaput!  Finito!  Gone!");this:moveto(this.home);this.injury = 0;this.fatigue = 0;this.drain = 0;.$combatant:get_resistance":get_resistance(damage_type);";"Get our resistance to certain types of damage.  Natural, or otherwise.";res = 0;for entry in ((this.species).resistance)  if (entry[1] == args[1])    res = entry[2] + res;  endifendforfor item in (this.contents)  if (item:resistance() != E_VERBNF)    res = res + item:resistance(args[1]);  endifendforreturn(res);$body_area:get_resistance":get_resistance(damage_type);";"How much of a certain type of damage we automatically resist.";res = 0;for entry in (this.resistance)  if (entry[1] == args[1])    res = entry[2] + res;  endifendforreturn(res);.$combatant:do_metabolismif (this.unconscious >5)  this.unconscious = this.unconscious - 5;else  this.unconscious = 0;endifif (this.fatigue >2)  this.fatigue = this.fatigue - 2;else  this.fatigue = 0;endifif (this.drain >2)  this.drain = this.drain - 2;else  this.drain = 0;endifif (this.injury >1)  if (random(100)>=50)    this.injury = this.injury - 1;  endifelse  this.injury = 0;endif$combatant:take_fatigue(fatigue)":take_fatigue(fatigue);";"Maybe take some fatigue, depending on our stamina.";fat = args[1];stamina = this:get_stat(#306);roll = random(100);if (roll < stamina)  maxsoak = stamina - roll;  if (maxsoak > (stamina/5))    maxsoak = (stamina/5);  endif   fat = fat - maxsoak;endifif (fat <1)  return(1);else  ttlfat = this.fatigue + fat;endifif (this.fatigue == 100)  this.injury = this.injury + fat;elseif (ttlfat >= 100)  roll = random(100);  if (roll > stamina)    this.unconscious = fat;  else    over = this.fatigue - 100;    this.fatigue = 100;    this.injury = this.injury + over;  endifelse  this.fatigue = ttlfat;endifif (this.injury >= 100)  this:die();endif$combatant:take_drain":take_drain(drain);";"Maybe take some drain, depending on our willpower.";dra = args[1];will = this:get_stat(#303);roll = random(100);if (roll < will)  maxsoak = will - roll;  if (maxsoak > (will/5))    maxsoak = (will/5);  endif   dra = dra - maxsoak;endifif (dra <1)  return(1);else  ttldra = this.drain + dra;endifif (ttldra > 99)  roll = random(100);  if (roll > will)    this.unconscious = dra;  else    this.drain = 100;  endifelse  this.drain = ttldra;endif@program $tangible:maybe_deteriorate"Damage the object, based on its quality, and a random modifier.";if (random(100) > (this.quality-args[1]))  if (random(20) == 1)    this.deterioration = this.deterioration + 1;    if (this.deterioration > this.quality)      this:destroy();    endif  endifendif .@verb $tangible:destroy"Open up the eventuality of breaking our little toy.";return(1);