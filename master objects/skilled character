Stats-----We have three kinds of stats, personal attributes, ability attributes, and injury attributesPersonal:Mental: Intelligence, Wisdom, *WillpowerPhysical: Strength, Dexterity, *StaminaSocial: Charisma, *Appearance, *Karma, *Resources*Used exclusively for rolls, not for abilitiesAbility:Intelligence Related:Spellcraft		Perception		Crafts			Languages	Mage LoreReading/Writing	MathematicsWisdom Related:Natural Lore	History			Training		Gaming		TailoringBlacksmithing	Healing			Mining			Farming		CookingCarpentry		Potion Creation	Hunting			Seafaring	FishingAlchemyStrength Related:Swimming		RunningDexterity Related:Edged Attack	Blunt Attack	Melee Attack	Dodging		ParryingRanged Attack	Throwing		Lockpick		Pickpocket	StealthClimbingCharisma Related:Etiquette		Singing			Dancing			Seduction	StorytellingStyle			Musicskilled.skills {{"skill",stat}};skilled:get_stat("stat")------------------------":get_stat(\"stat\");";"Get the objects stat.";if (typeof(args[1]) == STR)  stat = $match_utils:match(args[1],$skill_db.contents);else  stat = toobj(args[1]);endifrating = 0;time = 0;if ((stat == #-3) || (stat == #-2))  return(stat);endifif (stat.type == "ability")  for entry in (this.stats)    if (entry[1] == stat)      rating = entry[2];    endif  endforendifif (stat.type == "physical")  rating = this.(stat.aliases[2])[1];endifif (stat.modded)  if ((rating > 0) && (rating < 36))    rating = rating + (rating/7);  elseif  ((rating > 35) && (rating < 66))    rating = rating + (rating/5);  elseif  ((rating > 65) && (rating < 86))    rating = rating + (rating/3);  elseif  ((rating > 85) && (rating < 101))    rating = rating + (rating/2);  elseif  (rating > 100)    rating = rating + tonum(tofloat(rating)/1.5);  endifendifif (rating == 0)  rating = 1;endifreturn(rating);skilled:get_full_stat("stat")------------------------":get_full_stat(\"stat\");";"Get the complete objects stat.";time = 0;if (typeof(args[1]) == STR)  stat = $match_utils:match(args[1],$skill_db.contents);else  stat = toobj(args[1]);endifrating = 0;if ((stat == #-3) || (stat == #-2))  return(stat);endifif (stat.type == "ability")  for entry in (this.stats)    if (entry[1] == stat)      rating = entry[2];      time = entry[3];    endif  endforendifif (stat.type == "physical")  rating = this.(stat.aliases[2])[1];  time = this.(stat.aliases[2])[2];endifif (stat.modded)  if ((rating > 0) && (rating < 36))    rating = rating + (rating/7);  elseif  ((rating > 35) && (rating < 66))    rating = rating + (rating/5);  elseif  ((rating > 65) && (rating < 86))    rating = rating + (rating/3);  elseif  ((rating > 85) && (rating < 101))    rating = rating + (rating/2);  elseif  (rating > 100)    rating = rating + tonum(tofloat(rating)/1.5);  endifendifif (rating == 0)  rating = 1;endifreturn({stat,rating,time});skilled:set_stat("stat",stat)-----------------------------":set_stat(\"stat\",rating);";"Set the listed stat to the rating.";if (typeof(args[1]) == STR)  stat = $match_utils:match(args[1],$skill_db.contents);else  stat = toobj(args[1]);endifrating = tonum(args[2]);if ((stat == #-3) || (stat == #-2))  return(stat);endifif (stat.type == "ability")  c = 1;  for entry in (this.stats)    if (entry[1] == stat)      this.stats[c][2] = rating;      this.stats[c][3] = time();      return(1);    endif    c = c+1;  endfor  return(this.stats = {@this.stats,{stat,rating,0}});endifif (stat.type == "physical")  this.(stat.aliases[2])[1] = rating;  this.(stat.aliases[2])[2] = time();  return(1);endifreturn(0);skilled:get_raw_stat("stat")----------------------------":set_raw_stat(\"stat\");";"Get the raw listed stat to the rating.";rating = 0;if (typeof(args[1]) == STR)  stat = $match_utils:match(args[1],$skill_db.contents);else  stat = toobj(args[1]);endifif ((stat == #-3) || (stat == #-2))  return(stat);endifif (stat.type == "ability")  c = 1;  for entry in (this.stats)    if (entry[1] == stat)      return(this.stats[c][2]);    endif    c = c+1;  endfor  this.stats = {@this.stats,{stat,rating,0}};  return(rating);endifif (stat.type == "physical")  return(this.(stat.aliases[2])[1]);endifreturn(0);skilled:get_full_raw_stat("stat")----------------------------":set_full_raw_stat(\"stat\");";"Get the complete raw listed stat to the rating.";rating = 0;if (typeof(args[1]) == STR)  stat = $match_utils:match(args[1],$skill_db.contents);else  stat = toobj(args[1]);endifif ((stat == #-3) || (stat == #-2))  return(stat);endifif (stat.type == "ability")  c = 1;  for entry in (this.stats)    if (entry[1] == stat)      return(this.stats[c]);    endif    c = c+1;  endfor  this.stats = {@this.stats,{stat,rating,0}};  return({stat,rating,0});endifif (stat.type == "physical")  return({stat,@this.(stat.aliases[2])});endifreturn(0);skilled:resolve_roll({stat1,stat2},stat mod,diff,*boosted,*boost percentile)--------------------------------------------------------stats = args[1];a = stats[1];b = stats[2];{astat,aroll,atime} = this:get_full_stat(a);if (aroll != 0)  aroll = random(aroll);endifadam = this:damage_mods(aroll,astat);if (b == E_RANGE)  broll = 0;  bdam = 0;else  {bstat,broll,btime} = this:get_full_stat(b);  if (broll != 0)    broll = random(broll);  endif  bdam = this:damage_mods(broll,astat);endifif (adam < bdam)  dam = adam;else  dam = bdam;endifmod = args[2] + dam;dif = args[3];roll = aroll + broll + tonum(mod);boost = args[4];if (boost == E_RANGE)  boost = 0;endifper = args[5];if (per == E_RANGE)  per = 1.0;endifif (roll >= dif)  if (boost)    if (this:might_boost_stat(astat,per) == 0)      if (b != E_RANGE)        this:might_boost_stat(bstat,per);      endif    endif  endifendifreturn(roll-dif);skilled:might_boost_stat(stat,percent of boost)------------------------------":might_boost_stat(#stat);";"Possibly boost this stat a point.";stat = this:get_full_raw_stat(args[1]);percent = args[2];if (percent == E_RANGE)  percent = 1.0;else  percent = tofloat(percent);endifrating = stat[2];last = stat[3];stat = stat[1];mod = stat.mod * percent;if (stat.boostable)  if ((rating >= 0) && (rating < 21) && (last < time()-14400))    if (random(100) <= tonum(tofloat(20) * mod))      this:set_stat(stat,rating+1);      this:tell("boosted: ",stat.name," by 1");      return(1);    endif  elseif((rating > 20) && (rating < 41) && (last < time()-21600))    if (random(100) <= tonum(tofloat(15) * mod))      this:set_stat(stat,rating+1);      this:tell("boosted: ",stat.name," by 1");      return(1);    endif  elseif((rating > 40) && (rating < 61) && (last < time()-28800))    if (random(100) <= tonum(tofloat(10) * mod))      this:set_stat(stat,rating+1);      this:tell("boosted: ",stat.name," by 1");      return(1);    endif  elseif((rating > 60) && (rating < 81) && (last < time()-36000))    if (random(100) <= tonum(tofloat(5) * mod))      this:set_stat(stat,rating+1);      this:tell("boosted: ",stat.name," by 1");      return(1);    endif  elseif((rating > 80) && (rating < 101) && (last < time()-43200))    if (random(100) <= tonum(tofloat(2) * mod))      this:set_stat(stat,rating+1);      this:tell("boosted: ",stat.name," by 1");      return(1);    endif  elseif((rating > 100) && (last < time()-86400))    if (random(100) <= 1)      this:set_stat(stat,rating+1);      this:tell("boosted: ",stat.name," by 1");      return(1);    endif  endifendifreturn(0);