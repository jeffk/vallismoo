@prog #12053:tell_playerif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it bucko.");else  target = toobj(args[1]);  "Get all the relevant properties.";  linelen = player:linelen() || 79;  border = $string_utils:center("", linelen, "-");  name = target.name;  thename = tostr("[ ", name, " ($", parent(target).name, ")]");  nameborder = border;  nameborder[3..2 + length(thename)] = thename;  loc = target.location;  aliases = target.aliases;  gender = target.gender;  home = target.home;  alt = target.alt_info;  alt_names = {};  if (alt == 0)    alt = tostr(" Alternate : ", $string_utils:left(tostr("None"), 32));    altinfo = "Primary";  elseif (valid(alt))    alt = tostr(" Primary   : ", $string_utils:left(tostr(alt.name), 32));    altinfo = "Alternate";  else    for alt_char in (alt)      alt_names = $list_utils:append(alt_names, {alt_char.name});    endfor    alt = tostr(" Alts      : ", $string_utils:left(tostr($string_utils:english_list(alt_names)), 32));    altinfo = "Primary";  endif  if (target.ic)    ic = "Yes";  else    ic = "No ";  endif  if (target.unconscious)    conscious = "No ";  else    conscious = "Yes";  endif  notes = target:get_gm_notes();  deathtime = target.last_death_time;  deaths = target.total_deaths;  if (target.last_attacked_by[1] != #-1)    last_attacker = tostr(target.last_attacked_by[1].name, "(", target.last_attacked_by[1], ")");  else    last_attacker = "None";  endif  last_attack_time = target.last_attacked_by[2];  current_weapon = target.current_weapon;  total_kills = target.total_kills;  total_power = target.total_power;  if (target.last_healed_by[1] != #-1)    last_healer = tostr(target.last_healed_by[1].name, "(", target.last_healed_by[1], ")");  else    last_healer = "None";  endif  last_heal_time = target.last_healed_by[2];  object = this.namedb;  "Return the relevant properties to the player.";  "";  player:tell(nameborder);  player:tell($string_utils:format(linelen, tostr("Player Name : ", this:chopoff(tostr(name, " (", target, ")"), 20), " Location  : ", this:chopoff(tostr(loc.name, " (", loc, ")"), 32))));  player:tell($string_utils:format(linelen, tostr("Alt Status  : ", this:chopoff(tostr(altinfo), 20), alt)));  player:tell($string_utils:format(linelen, tostr("Gender      : ", this:chopoff(tostr(gender.name), 20), " Home      : ", this:chopoff(tostr(home.name, " (", home, ")"), 32))));  player:tell($string_utils:format(linelen, tostr("IC          : ", ic, "                  Conscious : ", conscious)));  player:tell("Aliases     : ", $string_utils:english_list(aliases));  player:tell(object:show_player(target));  player:tell(border);  player:tell($string_utils:format(linelen, tostr($string_utils:left(tostr("Kills/Power : ", total_kills, "/", total_power), 40), "    Weapon        : ", current_weapon.name, "(", current_weapon, ")")));  player:tell($string_utils:format(linelen, tostr("Last Death  : ", player:ctime(deathtime), "  Total Deaths  : ", deaths)));  player:tell($string_utils:format(linelen, tostr("Last Attack : ", player:ctime(last_attack_time), "  Last Attacker : ", last_attacker)));  player:tell($string_utils:format(linelen, tostr("Last Heal   : ", player:ctime(last_heal_time), "  Last Healer   : ", last_healer)));  thetime = tostr("[ ", player:ctime(), " ]");  timeborder = border;  timeborder[13..12 + length(thetime)] = thetime;  player:tell(timeborder);  if (notes != {})    player:tell($string_utils:format(linelen, tostr("Notes:"), linelen));    player:notify_lines(notes);    player:tell(border);  endifendif.@prog #12053:@fdosif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it, bucko.");elseif (args[1] == E_RANGE)  player:tell("Usage: @fdos <player>");else  target = $string_utils:match_player(args);  target = toobj($string_utils:from_list(target));  if (target == #-3)    player:tell("Can't match player by that name.");    return;  elseif (target == #-2)    return listdelete($command_utils:player_match_result($string_utils:match_player(args), args), 1);  endif  "Get all the relevant properties.";  linelen = player:linelen() || 79;  border = $string_utils:center("", linelen, "-");  name = target.name;  thename = tostr("[ ", name, " ]");  nameborder = border;  nameborder[3..2 + length(thename)] = thename;  loc = target.location;  aliases = target.aliases;  gender = target.gender;  home = target.home;  alt = target.alt_info;  alt_names = {};  if (alt == 0)    alt = tostr(" Alternate : ", $string_utils:left(tostr("None"), 32));    altinfo = "Primary";  elseif (valid(alt))    alt = tostr(" Primary   : ", $string_utils:left(tostr(alt.name), 32));    altinfo = "Alternate";  else    for alt_char in (alt)      alt_names = $list_utils:append(alt_names, {alt_char.name});    endfor    alt = tostr(" Alts      : ", $string_utils:left(tostr($string_utils:english_list(alt_names)), 32));    altinfo = "Primary";  endif  if (target.ic)    ic = "Yes";  else    ic = "No ";  endif  if (target.unconscious)    conscious = "No ";  else    conscious = "Yes";  endif  notes = target:get_gm_notes();  deathtime = target.last_death_time;  deaths = target.total_deaths;  if (target.last_attacked_by[1] != #-1)    last_attacker = tostr(target.last_attacked_by[1].name, "(", target.last_attacked_by[1], ")");  else    last_attacker = "None";  endif  last_attack_time = target.last_attacked_by[2];  current_weapon = target.current_weapon;  total_kills = target.total_kills;  total_power = target.total_power;  last_connect_time = target.last_connect_time;  last_disconnect_time = target.last_disconnect_time;  first_connect_time = target.first_connect_time;  if (target.last_healed_by[1] != #-1)    last_healer = tostr(target.last_healed_by[1].name, "(", target.last_healed_by[1], ")");  else    last_healer = "None";  endif  last_heal_time = target.last_healed_by[2];  description = target:description();  inventory = target:contents();  object = $pid;  "Return the relevant properties to the player.";  "";  player:tell(nameborder);  player:tell($string_utils:format(linelen, tostr("Player Name : ", $string_utils:left(tostr(name, " (", target, ")"), 20), " Location  : ", $string_utils:left(tostr(loc.name, " (", loc, ")"), 32))));  player:tell($string_utils:format(linelen, tostr("Alt Status  : ", $string_utils:left(tostr(altinfo), 20), alt)));  player:tell($string_utils:format(linelen, tostr("Gender      : ", $string_utils:left(tostr(gender.name), 15), "      Home      : ", $string_utils:left(tostr(home.name, " (", home, ")"), 20))));  player:tell($string_utils:format(linelen, tostr("IC          : ", ic, "                  Conscious : ", conscious)));  player:tell("Aliases     : ", $string_utils:english_list(aliases));  player:tell(object:show_player(target));  thetime = tostr("[ ", target:ctime(), " ]");  player:tell(border);  player:tell("Description :");  player:notify_lines(description);  player:tell("Inventory   : ");  player:tell(tostr($string_utils:names_of(inventory)));  player:tell(border);  player:tell($string_utils:format(linelen, tostr($string_utils:left(tostr("Kills/Power : ", total_kills, "/", total_power), 40), "    Weapon        : ", current_weapon.name, "(", current_weapon, ")")));  player:tell($string_utils:format(linelen, tostr("Last Death  : ", player:ctime(deathtime), "  Total Deaths  : ", deaths)));  player:tell($string_utils:format(linelen, tostr("Last Attack : ", player:ctime(last_attack_time), "  Last Attacker : ", last_attacker)));  player:tell($string_utils:format(linelen, tostr("Last Heal   : ", player:ctime(last_heal_time), "  Last Healer   : ", last_healer)));  player:tell($string_utils:format(linelen, tostr("Last Connect: ", player:ctime(last_connect_time)), linelen));  player:tell($string_utils:format(linelen, tostr("Last Discon : ", player:ctime(last_disconnect_time)), linelen));  player:tell($string_utils:format(linelen, tostr("First Conn  : ", player:ctime(first_connect_time)), linelen));  thetime = tostr("[ ", player:ctime(), " ]");  timeborder = border;  timeborder[13..12 + length(thetime)] = thetime;  player:tell(timeborder);  player:tell($string_utils:format(linelen, tostr("Notes:"), linelen));  player:notify_lines(notes);  player:tell(border);endif.