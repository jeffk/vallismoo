;#305.("description") = "Tools for the querying wiz.  Useful for snooping on deviants, and checking out potential problems."@prog #305:@wizinfoif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it, bucko.");else  target = player:my_match_object(argstr);  if ((target == #-3) || #-2)    target = $string_utils:match_player(args);    target = toobj($string_utils:from_list(target));    if (target == #-3)      player:tell("Object match failed.");      return;    elseif (target == #-2)      player:tell("Object match failed.");      return;    endif  endif  "Ok, lets check and see what they got...";  if ($object_utils:isa(target, $player))    this:tell_player(target);    return;  elseif ($object_utils:isa(target, $ahab))    this:tell_ahab(target);    return;  elseif ($object_utils:isa(target, $container))    this:tell_container(target);    return;  elseif ($object_utils:isa(target, $clothing))    this:tell_clothing(target);    return;  elseif ($object_utils:isa(target, $furniture))    this:tell_furniture(target);    return;  elseif ($object_utils:isa(target, $thing))    this:tell_thing(target);    return;  elseif ($object_utils:isa(target, $exit))    this:tell_exit(target);    return;  elseif ($object_utils:isa(target, $room))    this:tell_room(target);    return;  else    this:tell_generic(target);    return;  endif  player:tell("Object match failed.");endif.@prog #305:tell_playerif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it bucko.");else  target = toobj(args[1]);  "Get all the relevant properties.";  linelen = player:linelen() || 79;  border = $string_utils:center("", linelen, "-");  name = target.name;  thename = tostr("[ ", name, " ($", parent(target).name, ")]");  nameborder = border;  nameborder[3..2 + length(thename)] = thename;  loc = target.location;  aliases = target.aliases;  gender = target.gender;  home = target.home;  alt = target.alt_info;  alt_names = {};  if (alt == 0)    alt = tostr(" Alternate : ", $string_utils:left(tostr("None"), 32));    altinfo = "Primary";  elseif (valid(alt))    alt = tostr(" Primary   : ", $string_utils:left(tostr(alt.name), 32));    altinfo = "Alternate";  else    for alt_char in (alt)      alt_names = $list_utils:append(alt_names, {alt_char.name});    endfor    alt = tostr(" Alts      : ", $string_utils:left(tostr($string_utils:english_list(alt_names)), 32));    altinfo = "Primary";  endif  if (target.ic)    ic = "Yes";  else    ic = "No ";  endif  if (target.unconscious)    conscious = "No ";  else    conscious = "Yes";  endif  notes = target:get_gm_notes();  deathtime = target.last_death_time;  deaths = target.total_deaths;  if (target.last_attacked_by[1] != #-1)    last_attacker = tostr(target.last_attacked_by[1].name, "(", target.last_attacked_by[1], ")");  else    last_attacker = "None";  endif  last_attack_time = target.last_attacked_by[2];  current_weapon = target.current_weapon;  total_kills = target.total_kills;  total_power = target.total_power;  if (target.last_healed_by[1] != #-1)    last_healer = tostr(target.last_healed_by[1].name, "(", target.last_healed_by[1], ")");  else    last_healer = "None";  endif  last_heal_time = target.last_healed_by[2];  object = this.namedb;  "Return the relevant properties to the player.";  "";  player:tell(nameborder);  player:tell($string_utils:format(linelen, tostr("Player Name : ", this:chopoff(tostr(name, " (", target, ")"), 20), " Location  : ", this:chopoff(tostr(loc.name, " (", loc, ")"), 32))));  player:tell($string_utils:format(linelen, tostr("Alt Status  : ", this:chopoff(tostr(altinfo), 20), alt)));  player:tell($string_utils:format(linelen, tostr("Gender      : ", this:chopoff(tostr(gender.name), 20), " Home      : ", this:chopoff(tostr(home.name, " (", home, ")"), 32))));  player:tell($string_utils:format(linelen, tostr("IC          : ", ic, "                  Conscious : ", conscious)));  player:tell("Aliases     : ", $string_utils:english_list(aliases));  player:tell(object:show_player(target));  player:tell(border);  player:tell($string_utils:format(linelen, tostr($string_utils:left(tostr("Kills/Power : ", total_kills, "/", total_power), 40), "    Weapon        : ", current_weapon.name, "(", current_weapon, ")")));  player:tell($string_utils:format(linelen, tostr("Last Death  : ", player:ctime(deathtime), "  Total Deaths  : ", deaths)));  player:tell($string_utils:format(linelen, tostr("Last Attack : ", player:ctime(last_attack_time), "  Last Attacker : ", last_attacker)));  player:tell($string_utils:format(linelen, tostr("Last Heal   : ", player:ctime(last_heal_time), "  Last Healer   : ", last_healer)));  thetime = tostr("[ ", player:ctime(), " ]");  timeborder = border;  timeborder[13..12 + length(thetime)] = thetime;  player:tell(timeborder);  if (notes != {})    player:tell($string_utils:format(linelen, tostr("Notes:"), linelen));    player:notify_lines(notes);    player:tell(border);  endifendif.@prog #305:tell_ahabif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it bucko.");else  target = toobj(args[1]);  "Get all the relevant properties.";  linelen = player:linelen() || 79;  border = $string_utils:center("", linelen, "-");  name = target.name;  thename = tostr("[ ", name, " ($", parent(target).name, ")]");  nameborder = border;  nameborder[3..2 + length(thename)] = thename;  loc = target.location;  aliases = target.aliases;  gender = target.gender;  home = target.home;  if (target.ic)    ic = "Yes";  else    ic = "No ";  endif  if (target.unconscious)    conscious = "No ";  else    conscious = "Yes";  endif  deathtime = target.last_death_time;  deaths = target.total_deaths;  if (target.last_attacked_by[1] != #-1)    last_attacker = tostr(target.last_attacked_by[1].name, "(", target.last_attacked_by[1], ")");  else    last_attacker = "None";  endif  last_attack_time = target.last_attacked_by[2];  current_weapon = target.current_weapon;  total_kills = target.total_kills;  total_power = target.total_power;  if (target.last_healed_by[1] != #-1)    last_healer = tostr(target.last_healed_by[1].name, "(", target.last_healed_by[1], ")");  else    last_healer = "None";  endif  last_heal_time = target.last_healed_by[2];  verbs = verbs(target);  if (verbs == E_PERM)    verbs = {};  endif  properties = properties(target);  if (properties == E_PERM)    properties = {};  endif  reactors = target.reactors;  if (target.running)    running = "Yes";  else    running = "No";  endif  wander_chance = target.wander_chance;  shapers = target.shapers;  monitors = target.monitors;  "Return the relevant properties to the player.";  "";  player:tell(nameborder);  player:tell($string_utils:format(linelen, tostr("Player Name : ", this:chopoff(tostr(name, " (", target, ")"), 28), " Location  : ", this:chopoff(tostr(loc.name, " (", loc, ")"), 24))));  player:tell($string_utils:format(linelen, tostr("Gender      : ", this:chopoff(tostr(gender.name), 28), " Home      : ", this:chopoff(tostr(home.name, " (", home, ")"), 24))));  player:tell($string_utils:format(linelen, tostr("IC          : ", ic, "                          Conscious : ", conscious)));  player:tell($string_utils:format(linelen, tostr("Running     : ", running, "                           Wander Ch : ", wander_chance)));  player:tell(border);  player:tell($string_utils:format(linelen, tostr(this:chopoff(tostr("Kills/Power : ", total_kills, "/", total_power), 40), "    Weapon        : ", current_weapon.name, "(", current_weapon, ")")));  player:tell($string_utils:format(linelen, tostr("Last Death  : ", player:ctime(deathtime), "  Total Deaths  : ", deaths)));  player:tell($string_utils:format(linelen, tostr("Last Attack : ", player:ctime(last_attack_time), "  Last Attacker : ", last_attacker)));  player:tell($string_utils:format(linelen, tostr("Last Heal   : ", player:ctime(last_heal_time), "  Last Healer   : ", last_healer)));  thetime = tostr("[ ", player:ctime(), " ]");  timeborder = border;  timeborder[13..12 + length(thetime)] = thetime;  player:tell(timeborder);  if (verbs != {})    player:tell("Verbs       : ", $string_utils:english_list(verbs));  endif  if (properties != {})    player:tell("Properties  : ", $string_utils:english_list(properties));  endif  if (reactors != {})    player:tell("Reactors    : ", $string_utils:names_of(reactors));  endif  if (shapers != {})    player:tell("Shapers     : ", $string_utils:names_of(shapers));  endif  if (monitors != {})    player:tell("Monitors    : ", $string_utils:names_of(monitors));  endif  player:tell(border);endif.@prog #305:tell_containerif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it bucko.");else  target = toobj(args[1]);  "Get all the relevant properties.";  linelen = player:linelen() || 79;  border = $string_utils:center("", linelen, "-");  name = target.name;  thename = tostr("[ ", name, " ($", parent(target).name, ")]");  nameborder = border;  nameborder[3..2 + length(thename)] = thename;  loc = target.location;  aliases = target.aliases;  owner = target.owner;  size = target.object_size[1];  contents = target.contents;  chained = target.chained;  verbs = verbs(target);  if (verbs == E_PERM)    verbs = {};  endif  properties = properties(target);  if (properties == E_PERM)    properties = {};  endif  "Return the relevant properties to the player.";  "";  player:tell(nameborder);  player:tell($string_utils:format(linelen, tostr("Object Name : ", this:chopoff(tostr(name, " (", target, ")"), 28), " Location  : ", this:chopoff(tostr(loc.name, " (", loc, ")"), 24))));  player:tell($string_utils:format(linelen, tostr("Owner       : ", this:chopoff(tostr(owner.name, " (", owner, ")"), 28), " Size      : ", this:chopoff(tostr($string_utils:to_bytes(size)), 24))));  player:tell("Aliases     : ", $string_utils:english_list(aliases));  player:tell(border);  if (contents != {})    player:tell("Contents    : ", $string_utils:names_of(contents));  else    player:tell("Contents    : None");  endif  player:tell(border);  bleah = 0;  if (verbs != {})    player:tell("Verbs       : ", $string_utils:english_list(verbs));    bleah = 1;  endif  if (properties != {})    player:tell("Properties  : ", $string_utils:english_list(properties));    bleah = 1;  endif  if (chained != #-1)    player:tell("Chained To  : ", chained.name, " (", chained, ")");    bleah = 1;  endif  if (bleah == 1)    player:tell(border);  endifendif.@prog #305:tell_furnitureif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it bucko.");else  target = toobj(args[1]);  "Get all the relevant properties.";  linelen = player:linelen() || 79;  border = $string_utils:center("", linelen, "-");  name = target.name;  thename = tostr("[ ", name, " ($", parent(target).name, ")]");  nameborder = border;  nameborder[3..2 + length(thename)] = thename;  aliases = target.aliases;  owner = target.owner;  size = target.object_size[1];  verbs = verbs(target);  if (verbs == E_PERM)    verbs = {};  endif  properties = properties(target);  if (properties == E_PERM)    properties = {};  endif  space = target.space;  if (target.chained == #-1)    chained = "No";  else    chained = target.chained;  endif  sitting = target.sitting;  reclining = target.reclining;  "Return the relevant properties to the player.";  "";  player:tell(nameborder);  player:tell($string_utils:format(linelen, tostr("Object Name : ", this:chopoff(tostr(name, " (", target, ")"), 28), " Owner     : ", this:chopoff(tostr(owner.name, " (", owner, ")"), 24))));  player:tell($string_utils:format(linelen, tostr("Space       : ", this:chopoff(tostr(space), 28), " Chained   : ", this:chopoff(tostr(chained), 24))));  player:tell("Aliases     : ", $string_utils:english_list(aliases));  player:tell(border);  bleah = 0;  if ((sitting != {}) && (sitting != E_PERM))    player:tell("Sitting     : ", $string_utils:names_of(sitting));    bleah = 1;  endif  if ((reclining != {}) && (reclining != E_PERM))    player:tell("Reclining   : ", $string_utils:names_of(reclining));    bleah = 1;  endif  if ((verbs != {}) && (verbs != E_PERM))    player:tell("Verbs       : ", $string_utils:english_list(verbs));    bleah = 1;  endif  if ((properties != {}) && (verbs != E_PERM))    player:tell("Properties  : ", $string_utils:english_list(properties));    bleah = 1;  endif  if (bleah == 1)    player:tell(border);  endifendif.@prog #305:tell_exitif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it bucko.");else  target = toobj(args[1]);  "Get all the relevant properties.";  linelen = player:linelen() || 79;  border = $string_utils:center("", linelen, "-");  name = target.name;  thename = tostr("[ ", name, " ($", parent(target).name, ")]");  nameborder = border;  nameborder[3..2 + length(thename)] = thename;  aliases = target.aliases;  owner = target.owner;  size = target.object_size[1];  verbs = verbs(target);  if (verbs == E_PERM)    verbs = {};  endif  properties = properties(target);  if (properties == E_PERM)    properties = {};  endif  source = target.source;  dest = target.dest;  "Return the relevant properties to the player.";  "";  player:tell(nameborder);  player:tell($string_utils:format(linelen, tostr("Object Name : ", this:chopoff(tostr(name, " (", target, ")"), 28), " Owner     : ", this:chopoff(tostr(owner.name, " (", owner, ")"), 24))));  player:tell($string_utils:format(linelen, tostr("Source      : ", this:chopoff(tostr(source.name, " (", source, ")"), 28), " Dest      : ", this:chopoff(tostr(dest.name, " (", dest, ")"), 24))));  player:tell("Aliases     : ", $string_utils:english_list(aliases));  player:tell(border);  bleah = 0;  if ((verbs != {}) && (verbs != E_PERM))    player:tell("Verbs       : ", $string_utils:english_list(verbs));    bleah = 1;  endif  if ((properties != {}) && (verbs != E_PERM))    player:tell("Properties  : ", $string_utils:english_list(properties));    bleah = 1;  endif  if (bleah == 1)    player:tell(border);  endifendif.@prog #305:tell_roomif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it bucko.");else  target = toobj(args[1]);  "Get all the relevant properties.";  linelen = player:linelen() || 79;  border = $string_utils:center("", linelen, "-");  name = target.name;  thename = tostr("[ ", name, " ($", parent(target).name, ")]");  nameborder = border;  nameborder[3..2 + length(thename)] = thename;  loc = target.location;  aliases = target.aliases;  owner = target.owner;  size = target.object_size[1];  verbs = verbs(target);  if (verbs == E_PERM)    verbs = {};  endif  properties = properties(target);  if (properties == E_PERM)    properties = {};  endif  contents = target.contents;  "Return the relevant properties to the player.";  "";  player:tell(nameborder);  player:tell($string_utils:format(linelen, tostr("Object Name : ", this:chopoff(tostr(name, " (", target, ")"), 28), " Location  : ", this:chopoff(tostr(loc.name, " (", loc, ")"), 24))));  player:tell($string_utils:format(linelen, tostr("Owner       : ", this:chopoff(tostr(owner.name, " (", owner, ")"), 28), " Size      : ", this:chopoff(tostr($string_utils:to_bytes(size)), 24))));  player:tell("Aliases     : ", $string_utils:english_list(aliases));  player:tell(border);  bleah = 0;  if ((contents != {}) && (contents != E_PERM))    player:tell("Contents    : ", $string_utils:names_of(contents));    bleah = 1;  endif  if ((verbs != {}) && (verbs != E_PERM))    player:tell("Verbs       : ", $string_utils:english_list(verbs));    bleah = 1;  endif  if ((properties != {}) && (verbs != E_PERM))    player:tell("Properties  : ", $string_utils:english_list(properties));    bleah = 1;  endif  if (bleah == 1)    player:tell(border);  endifendif.@prog #305:tell_thingif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it bucko.");else  target = toobj(args[1]);  "Get all the relevant properties.";  linelen = player:linelen() || 79;  border = $string_utils:center("", linelen, "-");  name = target.name;  thename = tostr("[ ", name, " ($", parent(target).name, ")]");  nameborder = border;  nameborder[3..2 + length(thename)] = thename;  loc = target.location;  aliases = target.aliases;  owner = target.owner;  size = target.object_size[1];  chained = target.chained;  verbs = verbs(target);  if (verbs == E_PERM)    verbs = {};  endif  properties = properties(target);  if (properties == E_PERM)    properties = {};  endif  "Return the relevant properties to the player.";  "";  player:tell(nameborder);  player:tell($string_utils:format(linelen, tostr("Object Name : ", this:chopoff(tostr(name, " (", target, ")"), 28), " Location  : ", this:chopoff(tostr(loc.name, " (", loc, ")"), 24))));  player:tell($string_utils:format(linelen, tostr("Owner       : ", this:chopoff(tostr(owner.name, " (", owner, ")"), 28), " Size      : ", this:chopoff(tostr($string_utils:to_bytes(size)), 24))));  player:tell("Aliases     : ", $string_utils:english_list(aliases));  player:tell(border);  bleah = 0;  if (verbs != {})    player:tell("Verbs       : ", $string_utils:english_list(verbs));    bleah = 1;  endif  if (properties != {})    player:tell("Properties  : ", $string_utils:english_list(properties));    bleah = 1;  endif  if (chained != #-1)    player:tell("Chained To  : ", chained.name, " (", chained, ")");    bleah = 1;  endif  if (bleah == 1)    player:tell(border);  endifendif.@prog #305:tell_genericif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it bucko.");else  target = toobj(args[1]);  "Get all the relevant properties.";  linelen = player:linelen() || 79;  border = $string_utils:center("", linelen, "-");  name = target.name;  thename = tostr("[ ", name, " ($", parent(target).name, ")]");  nameborder = border;  nameborder[3..2 + length(thename)] = thename;  loc = target.location;  aliases = target.aliases;  owner = target.owner;  size = target.object_size[1];  verbs = verbs(target);  if (verbs == E_PERM)    verbs = {};  endif  properties = properties(target);  if (properties == E_PERM)    properties = {};  endif  "Return the relevant properties to the player.";  "";  player:tell(nameborder);  player:tell($string_utils:format(linelen, tostr("Object Name : ", this:chopoff(tostr(name, " (", target, ")"), 28), " Location  : ", this:chopoff(tostr(loc.name, " (", loc, ")"), 24))));  player:tell($string_utils:format(linelen, tostr("Owner       : ", this:chopoff(tostr(owner.name, " (", owner, ")"), 28), " Size      : ", this:chopoff(tostr($string_utils:to_bytes(size)), 24))));  player:tell("Aliases     : ", $string_utils:english_list(aliases));  player:tell(border);  bleah = 0;  if (verbs != {})    player:tell("Verbs       : ", $string_utils:english_list(verbs));    bleah = 1;  endif  if (properties != {})    player:tell("Properties  : ", $string_utils:english_list(properties));    bleah = 1;  endif  if (bleah == 1)    player:tell(border);  endifendif.@prog #305:chopofflen = tonum(args[2]);stringy = $string_utils:left(args[1], len);return stringy[1..len];.@prog #305:tell_clothingif (!$object_utils:isa(player, $builder))  player:tell("Hey, watch it bucko.");else  target = toobj(args[1]);  "Get all the relevant properties.";  linelen = player:linelen() || 79;  border = $string_utils:center("", linelen, "-");  name = target.name;  thename = tostr("[ ", name, " ($", parent(target).name, ")]");  nameborder = border;  nameborder[3..2 + length(thename)] = thename;  loc = target.location;  aliases = target.aliases;  owner = target.owner;  size = target.object_size[1];  chained = target.chained;  verbs = verbs(target);  if (verbs == E_PERM)    verbs = {};  endif  properties = properties(target);  if (properties == E_PERM)    properties = {};  endif  worn = target:worn_msg();  desc = target:description();  "Return the relevant properties to the player.";  "";  player:tell(nameborder);  player:tell($string_utils:format(linelen, tostr("Object Name : ", this:chopoff(tostr(name, " (", target, ")"), 28), " Location  : ", this:chopoff(tostr(loc.name, " (", loc, ")"), 24))));  player:tell($string_utils:format(linelen, tostr("Owner       : ", this:chopoff(tostr(owner.name, " (", owner, ")"), 28), " Size      : ", this:chopoff(tostr($string_utils:to_bytes(size)), 24))));  player:tell("Aliases     : ", $string_utils:english_list(aliases));  player:tell("Description : ", desc);  player:tell("Worn Message: ", worn);  player:tell(border);  bleah = 0;  if (verbs != {})    player:tell("Verbs       : ", $string_utils:english_list(verbs));    bleah = 1;  endif  if (properties != {})    player:tell("Properties  : ", $string_utils:english_list(properties));    bleah = 1;  endif  if (chained != #-1)    player:tell("Chained To  : ", chained.name, " (", chained, ")");    bleah = 1;  endif  if (bleah == 1)    player:tell(border);  endifendif.