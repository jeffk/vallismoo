@prog #1010:@csizeif (((tostr(args[1]) != "zones") && (tostr(args[1]) != "zone")) && (player != #709))  if (player:my_match_object(args[1]) == #-3)    player:tell("You can't seem to match ", args[1], ".");    return;  endifelseif (!$object_utils:isa(player, $builder))  player:tell("You don't have permission to do that.");  return;endifownedfo = #411;counter = 1;if ((args[1] == "zones") || (args[1] == "zone"))  for target in ($object_utils:leaves(#185))    total = target.object_size[1];    counter = 1;    for thingy in (this:all_contents(target))      counter = counter + 1;      if ($object_utils:has_property(thingy, "object_size"))        total = total + thingy.object_size[1];      endif      $command_utils:suspend_if_needed(1);    endfor    player:tell(target.name, " (", target, ")'s size is ", #411:byte_string(total), " for ", counter, " objects.");  endfor  return "Done.";endiftarget = player:my_match_object(args[1]);total = target.object_size[1];for thingy in (this:all_contents(target))  counter = counter + 1;  if ($object_utils:has_property(thingy, "object_size"))    total = total + thingy.object_size[1];  endif  $command_utils:suspend_if_needed(1);endforplayer:tell(target.name, "'s size is ", #411:byte_string(total), " for ", counter, " objects.");.@verb #1010:"@dparents @detailed-parents" any any any "RX" #709@prog #1010:@dparentsif (args[3] != E_RANGE)  if (args[3] == "owner" || "location")    secondarg = tostr(args[3]);  else    secondarg = "owner";  endifelse  secondarg = "owner";endifif ((player:my_match_object(args[1]) == #-3) || player:my_match_object(args[1]) == #-1)  player:tell("You can't seem to match that.");  return;elseif (!$object_utils:isa(player, $builder))  player:tell("You don't have permission to do that.");  return;endiftarget = player:my_match_object(args[1]);bleah = 0;widget = parent(target);thirdarg = {target,widget};while (bleah != 1)  if (parent(widget) != #-1)    thirdarg = {@thirdarg,parent(widget)};    widget = parent(widget);  else    bleah = 1;  endifendwhilethis:tell_items(target,secondarg,thirdarg,0);.@prog #1010:@dkidsif (args[3] != E_RANGE)  if (args[3] == "owner" || "location")    secondarg = tostr(args[3]);  else    secondarg = "location";  endifelse  secondarg = "location";endifif ((player:my_match_object(args[1]) == #-3) || player:my_match_object(args[1]) == #-1)  player:tell("You can't seem to match that.");  return;elseif (!$object_utils:isa(player, $builder))  player:tell("You don't have permission to do that.");  return;endiftarget = player:my_match_object(args[1]);thirdarg = children(target);this:tell_items(target,secondarg,thirdarg,0);.@verb #1010:"all_contents" this none this "RXD" #709@prog #1010:all_contentsres = {};for y in (args[1].contents)  res = {@res, y, @this:all_contents(y)};  $command_utils:suspend_if_needed(1);endforreturn res;.@verb #1010:"@dcontents @detailed-contents" any none none "RX" #709@prog #1010:@dcontentsif (args[3] != E_RANGE)  if (args[3] == "owner" || "location")    secondarg = tostr(args[3]);  else    secondarg = "owner";  endifelse  secondarg = "owner";endifif ((player:my_match_object(args[1]) == #-3) || player:my_match_object(args[1]) == #-1)  player:tell("You can't seem to match that.");  return;elseif (!$object_utils:isa(player, $builder))  player:tell("You don't have permission to do that.");  return;endiftarget = player:my_match_object(args[1]);thirdarg = target.contents;this:tell_items(target,secondarg,thirdarg,1);.@verb #1010:"@dsiblings @detailed-siblings" any any any "RX" #709@prog #1010:@dsiblingsif (args[3] != E_RANGE)  if (args[3] == "owner" || "location")    secondarg = tostr(args[3]);  else    secondarg = "location";  endifelse  secondarg = "location";endifif ((player:my_match_object(args[1]) == #-3) || player:my_match_object(args[1]) == #-1)  player:tell("You can't seem to match that.");  return;elseif (!$object_utils:isa(player, $builder))  player:tell("You don't have permission to do that.");  return;endiftarget = player:my_match_object(args[1]);thirdarg = children(parent(target));this:tell_items(target,secondarg,thirdarg,0);.@verb #1010:"@dsiblings" any none none "RX" #709@verb #1010:"tell_items" tnt "RX" #709@program #1010:tell_items"linelen = player:linelen() || 79;total = 0;counter = 0;target = args[1];flipped = tostr(args[2]);wally = args[4];line = "vrbs prop    obj  name                            size";if (wally == 1)  line = tostr(line," totlsize");endifif (flipped == "owner")  line = tostr(line," owner");elseif (flipped == "location")  line = tostr(line," location");endiflineinfo = {line};bleahthing = lineinfo;for thingy in (args[3])  counter = counter + 1;  if ((verbs(thingy) != E_PERM) && (verbs(thingy) != {}))    verbs = tostr($string_utils:right(tostr(length(verbs(thingy))), 3), " ");  else    verbs = tostr($string_utils:right(tostr(" "), 3), " ");  endif  if ((properties(thingy) != E_PERM) && (properties(thingy) != {}))    properties = tostr($string_utils:right(tostr(length(properties(thingy))), 3), " ");  else    properties = tostr($string_utils:right(tostr(" "), 3), " ");  endif  object = tostr($string_utils:right(tostr(thingy), 7), " ");  if (valid(parent(thingy)))    if (thingy.description == parent(thingy).description)      widget = "!";    else      widget = " ";    endif  else    widget = "!";  endif  if ($object_utils:has_property(thingy, "name"))    if (length(thingy.name) > 25)      name = tostr($string_utils:left(tostr(thingy.name[1..25]), 25), " :");    else      name = tostr($string_utils:left(tostr(thingy.name), 25), " :");    endif  endif  if ($object_utils:has_property(thingy, "object_size"))    objsize = $string_utils:right(tostr($string_utils:to_bytes(thingy.object_size[1])), 8);    total = total + thingy.object_size[1];  else    objsize = "        ";  endif  if (wally)    if ($object_utils:has_property(thingy, "contents"))      if (thingy.contents != {})        tlsz = thingy.object_size[1];        for widgie in (this:all_contents(thingy))          tlsz = tlsz + widgie.object_size[1];          $command_utils:suspend_if_needed(5);        endfor        tlsz = $string_utils:right(tostr($string_utils:to_bytes(tlsz)), 8);      else        tlsz = "        ";      endif    endif  else    tlsz = "        ";  endif  if (flipped == "location")    if ($object_utils:isa(thingy,$exit))      flip = $string_utils:left(tostr(thingy.source.name," (",thingy.source,") > ",thingy.dest.name," (",thingy.dest,")"), 20);    elseif (valid(thingy.location))      flip = $string_utils:left(tostr(thingy.location.name, " (", thingy.location, ")"), 20);    else      flip = "$nothing (#-1)";    endif  elseif (flipped == "owner")    if (valid(thingy.owner))      flip = $string_utils:left(tostr(thingy.owner.name, " (", thingy.owner, ")"), 20);    else      flip = "None.";    endif  else    flip = "";  endif  $command_utils:suspend_if_needed(5);  if (wally)    lineinfo = $list_utils:append(lineinfo, {$string_utils:format(linelen, tostr(verbs, properties, " ", object, widget, name, " ", objsize, " ", tlsz, " ", flip))});  else    lineinfo = $list_utils:append(lineinfo, {$string_utils:format(linelen, tostr(verbs, properties, " ", object, widget, name, " ", objsize, " ", flip))});  endifendforlineinfo = $list_utils:append(lineinfo, {" "});lineinfo = $list_utils:append(lineinfo, {tostr("      Shown Objects: ", counter, "  Shown Bytes: ", $string_utils:to_bytes(total))});if (length(lineinfo) == 3)  player:tell("Nothing found.  Check your syntax and try again.");  return;endiffor line in (lineinfo)  player:tell(line);  $command_utils:suspend_if_needed(5);endfor.@verb #1010:"@daudit" any any any "RX" #709@program #1010:@daudit"Permission checks.";if (!$rpg:trusted(player))  player:tell("You don't have permission to do that!");  return;endif"Make sure we can grok it in the first place.";if (argstr == "")  player:Tell("Error.  Nothing to audit.");  return;endif"Define our global variables.";arg = argstr;arg = $string_utils:explode(arg," ");target = player;matchobject = 0;matchstring = "*";options = {1,0};"^- arg 1 is owner/location, arg 2 is detailed/curt";itemlist = {};counter = 1;"And start parsing the argument string.";while (counter <= length(arg))  $command_utils:suspend_if_needed(1);  cnt = counter;  if (args[cnt] == "for")    counter = counter + 1;    if (args[cnt+1] == "just")      matchstring = "";      switch = 1;      counter = counter + 1;      for entry in (arg[cnt+2..$])        if (((entry != "for") && (entry != "with") && (switch)) && (($object_utils:match_object(entry) == #-3) || ($object_utils:match_object(entry) == #-2)))          if (matchstring == "")           matchstring = tostr(entry);          else           matchstring = tostr(matchstring," ",entry);          endif           counter = counter + 1;        elseif ($object_utils:match_object(entry) != #-3)          matchobject = $object_utils:match_object(entry);        else           switch = 0;        endif      endfor    else      matchstring = "";      switch = 1;      for entry in (arg[cnt+1..$])        if (((entry != "for") && (entry != "with") && (switch)) && (($object_utils:match_object(entry) == #-3) || ($object_utils:match_object(entry) == #-2)))          if (matchstring == "")           matchstring = tostr(entry);          else           matchstring = tostr(matchstring," ",entry);          endif           counter = counter + 1;        elseif (($object_utils:match_object(entry) != #-3))           matchobject = $object_utils:match_object(entry);        else           switch = 0;        endif      endfor      matchstring = tostr("*",matchstring,"*");    endif  elseif (args[cnt] == "with")    counter = counter + 1;    for entry in (args[cnt+1..$])      if (entry == "owner")        options[1] = 0;        counter = counter + 1;      elseif (entry = "details")        options[2] = 1;        counter = counter + 1;      else        counter = counter + 1;      endif    endfor  else    if (counter == 1)      if (arg[cnt] == ("db" || "moo" || "system"))         target = "db";      elseif ((arg[cnt] == "wizards") || (arg[cnt] == "wizs") || (arg[cnt] == "gods") || (arg[cnt] == "god"))         target = "wiz";      elseif ((arg[cnt] == "programmers") || (arg[cnt] == "progs") || (arg[cnt] == "teks") || (arg[cnt] == "tek"))         target = "prog";      elseif ((arg[cnt] == "builders") || (arg[cnt] == "builder") || (arg[cnt] == "geos") || (arg[cnt] == "geo"))         target = "builder";      elseif ((arg[cnt] == "players") || (arg[cnt] == "player") || (arg[cnt] == "pcs") || (arg[cnt] == "pc"))         target = "player";      elseif ((arg[cnt] == "nothing") || (arg[cnt] == "#-1"))         target = "nothing";      elseif (($string_utils:match_player(arg[cnt]) != #-3) && ($string_utils:match_player(arg[cnt]) != #-2))         target = $string_utils:match_player(arg[cnt]);      else         target = $string_utils:match_player(arg[cnt]);      endif      endif    counter = counter + 1;  endifendwhileif (typeof(target) == STR)  targstr = tostr("Auditing: $",target);else  targstr = tostr("Auditing: ",target.name,"(",target,")");endifif (options[1])  optionone = tostr("Options: Location");else  optionone = tostr("Options: Owner");endifif (options[2])  optiontwo = tostr("/Detailed");else  optiontwo = tostr("/Curt");endifif (matchobject != 0)  player:tell(targstr,"  For: ",matchobject.name,"(",matchobject,")  ",optionone,optiontwo);else  player:tell(targstr,"  For: ",matchstring, "  ",optionone,optiontwo);endif"Ok, we're done with the argument string, and everything should be set.";"Now lets start the funfunfun task of getting the list-o-items.";"First, we'll check for our global names.";if (typeof(target) == STR)  "Are we searching through $nothing?";  if (target == "nothing")    objectnum = 1;    max = tonum(max_object());    while (objectnum <= max)      $command_utils:suspend_if_needed(1);      object = toobj(objectnum);      if ((valid(object)) && (object.location == #-1))        if (matchobject != 0)          if ($object_utils:isa(object,matchobject))            itemlist = {@itemlist,object};          endif          elseif (matchstring == "*")          itemlist = {@itemlist,object};        elseif ($string_utils:match_string(object.name,matchstring) != 0)          itemlist = {@itemlist,object};        endif      endif      objectnum = objectnum + 1;    endwhile  "Are we searching the entire DB?";  elseif (target == "db")    objectnum = 1;    max = tonum(max_object());    while (objectnum <= max)      $command_utils:suspend_if_needed(1);      object = toobj(objectnum);      if ((valid(object)))        if (matchobject != 0)          if ($object_utils:isa(object,matchobject))            itemlist = {@itemlist,object};          endif          elseif (matchstring == "*")          itemlist = {@itemlist,object};        elseif ($string_utils:match_string(object.name,matchstring) != 0)          itemlist = {@itemlist,object};        endif      endif      objectnum = objectnum + 1;    endwhile  else    targetlist = children(#0.(target));    for targetowner in (targetlist)      if (typeof(targetowner.owned_objects) == LIST)        for object in (targetowner.owned_objects)          $command_utils:suspend_if_needed(1);          if (valid(object))            if (matchobject != 0)              if ($object_utils:isa(object,matchobject))                itemlist = {@itemlist,object};              endif              elseif (matchstring == "*")              itemlist = {@itemlist,object};            elseif ($string_utils:match_string(object.name,matchstring) != 0)              itemlist = {@itemlist,object};            endif          endif        endfor      endif    endfor  endifelse  if ((matchstring == "*") && (matchobject == 0))    itemlist = target.owned_objects;  else    for object in (target.owned_objects)      $command_utils:suspend_if_needed(1);      if (matchobject != 0)          if ($object_utils:isa(object,matchobject))            itemlist = {@itemlist,object};          endif        elseif ($string_utils:match_string(object.name,matchstring) != 0)        itemlist = {@itemlist,object};      endif    endfor  endifendifitemlist = this:flatten(itemlist);if (options[1])  owner = "location";else  owner = "owner";endifif (typeof(target) == STR)  this:tell_items(player,owner,itemlist,options[2]);else  this:tell_items(target,owner,itemlist,options[2]);endif.--------- (Old One.) ------------"Do the globals checks.";if (args[1] == E_RANGE)  target = player;elseif ((args[1] == "wizards") || (args[1] == "wizs") || (args[1] == "wizard"))  target = children($wiz);elseif ((args[1] == "programmers") || (args[1] == "progs") || (args[1] == "prog") || (args[1] == "programmer"))  target = children($prog);elseif ((args[1] == "builders") || (args[1] == "builder") || (args[1] == "geo") || (args[1] == "geos"))  target = children($builder);elseif ((args[1] == "players") || (args[1] == "player") || (args[1] == "user") || (args[1] == "users"))  target = children($player);else  target = $string_utils:match_player(args[1]);endif"Make sure there's something there, and they've got permission to do that.";if ((target == #-3) && !((args[1] == "moo") || (args[1] == "system") || (args[1] == "db") || (args[1] == "everything")))  player:tell("You can't seem to match ", args[1], ".");  return;elseif (!$rpg:trusted(player))  player:tell("You don't have permission to do that.");  return;endif"Check to see if we're auditing a level of ownership.";if (typeof(target) == LIST)  ownedlist = {};  for owner in (target)    newlist = owner.owned_objects;    ownedlist = {ownedlist,newlist};  endfor  ownedlist = this:flatten(ownedlist);  secondarg = "owner";else  ownedlist = target.owned_objects;endif"Check to see what the ending item should be.";if ((args[3] != E_RANGE) && (args[2] != "with"))  if ((typeof($object_utils:match_object(args[3])) == OBJ) && ($object_utils:match_object(args[3]) != #-3))    sweepfor = $object_utils:match_object(tostr(args[3]));  else    sweepfor = tostr(args[3]);  endifelse  sweepfor = 0;endifif (args[3] == "owner")  secondarg = "owner";else  secondarg = "location";endifif ((args[1] == "moo") || (args[1] == "system") || (args[1] == "db") || (args[1] == "everything"))  secondarg = "owner";  this:daudit_system(sweepfor,secondarg);  return;endifif (sweepfor == 0)  genericlist = {};  ahablist = {};  exitlist = {};  roomlist = {};  thinglist = {};  clothinglist = {};  furniturelist = {};  otherlist = {};  for item in (ownedlist)    if ($string_utils:match_string(tostr(item.name), "generic*") != 0)      genericlist = {@genericlist, item};    elseif($object_utils:isa(item,$room))      roomlist = {@roomlist,item};    elseif($object_utils:isa(item,$exit))      exitlist = {@exitlist,item};    elseif($object_utils:isa(item,$ahab))      ahablist = {@ahablist,item};    elseif($object_utils:isa(item,$furniture))      furniturelist = {@furniturelist,item};    elseif($object_utils:isa(item,$clothing))      clothinglist = {@clothinglist,item};    elseif($object_utils:isa(item,$thing))      furniturelist = {@thinglist,item};    else      otherlist = {@otherlist,item};    endif    if ($command_utils:running_out_of_ticks())      player:tell("...working on ",item,"...");      suspend(3);    endif;  endfor  thirdarg = $list_utils:flatten({@genericlist,@ahablist,@exitlist,@roomlist,@thinglist,@clothinglist,@furniturelist,@otherlist});elseif (typeof(sweepfor) == STR)  itemlist = {};  matched = tostr("*",sweepfor,"*");  for item in (ownedlist)    if ($command_utils:running_out_of_time())      if (random(5) == 5)        player:tell("...working on ",item,"...");      endif      suspend(1);    endif;    if (typeof($string_utils:match_string(tostr(item.name), matched)) == LIST)      itemlist = {@itemlist, item};    endif  endfor  thirdarg = this:flatten(itemlist);else  thirdarg = {};  for item in (ownedlist)    if ($object_utils:isa(item,sweepfor))      thirdarg = {@thirdarg,item};    endif  endfor  thirdarg = $list_utils:flatten(thirdarg);endifif (typeof(target) == LIST)  this:tell_items(target[1],secondarg,thirdarg,0);else  this:tell_items(target,secondarg,thirdarg,0);endif.#1010:flattennewlist = {};for elm in (args[1])  if (typeof(elm) == LIST)    newlist = {@newlist, @this:flatten(elm)};  else    newlist = {@newlist, elm};  endif  $command_utils:suspend_if_needed(1);endforreturn newlist;@program #1010:range":range([m,]n) => {m,m+1,...,n}";if (listdelete(args, 1))else  args = {1, @args};endifret = {};for k in [args[1]..args[2]]  ret = {@ret, k};  $command_utils:suspend_if_needed(5);endforreturn ret;#1010:daudit_systemsweepfor = args[1];secondarg = tostr(args[2]);target = player;switch = 10;if (sweepfor == 0)  genericlist = {};  ahablist = {};  exitlist = {};  roomlist = {};  thinglist = {};  clothinglist = {};  furniturelist = {};  otherlist = {};  item = 0;  while (item != tonum(max_object()))    item = toobj(item);    if (valid(item))    if ($string_utils:match_string(tostr(item.name), "generic*") != 0)      genericlist = {@genericlist, item};    elseif($object_utils:isa(item,$room))      roomlist = {@roomlist,item};    elseif($object_utils:isa(item,$exit))      exitlist = {@exitlist,item};    elseif($object_utils:isa(item,$ahab))      ahablist = {@ahablist,item};    elseif($object_utils:isa(item,$furniture))      furniturelist = {@furniturelist,item};    elseif($object_utils:isa(item,$clothing))      clothinglist = {@clothinglist,item};    elseif($object_utils:isa(item,$thing))      furniturelist = {@thinglist,item};    else      otherlist = {@otherlist,item};    endif    if ($command_utils:running_out_of_time())      if (switch == 10)        player:tell("...working on ",item,"...");        switch = 0;      endif      suspend(1);      switch = switch + 1;    endif;    endif;    item = tonum(item) + 1;  endwhile  thirdarg = $list_utils:flatten({@genericlist,@ahablist,@exitlist,@roomlist,@thinglist,@clothinglist,@furniturelist,@otherlist});elseif (typeof(sweepfor) == STR)  itemlist = {};  matched = tostr("*",sweepfor,"*");  item = 0;  while (item != tonum(max_object()))    item = toobj(item);    if ($command_utils:running_out_of_time())      if (switch == 10)        player:tell("...working on ",item,"...");        switch = 0;      endif      suspend(1);      switch = switch + 1;    endif;    if (valid(item))    if ($string_utils:match_string(tostr(item.name), matched) != 0)      itemlist = {@itemlist, item};    endif    endif;    item = tonum(item) + 1;  endwhile  thirdarg = itemlist;else  thirdarg = {};  item = 0;  while (item != tonum(max_object()))    item = toobj(item);    if ($command_utils:running_out_of_time())      if (switch == 10)        player:tell("...working on ",item,"...");        switch = 0;      endif      suspend(1);      switch = switch + 1;    endif;    if (valid(item))    if ($object_utils:isa(item,sweepfor))      thirdarg = {@thirdarg,item};    endif;    endif;    item = tonum(item) + 1;  endwhileendifthis:tell_items(target,secondarg,thirdarg,0);.@csize object-------------Calculates the total size of the object and all it's contained items.@daudit-------A detailed audit that is sorted by generics.  'generic' items first, $rooms, $exits, $ahab's, $furniture, $clothing, $thing, and then others.Options:  @daudit <player>    Audits the player for all children, sorted by above listing.  @daudit <player> for <parent>    Audits the player for all children of said parent.  Ex: @daudit me for $room, @daudit me for #141    @daudit <player> for <string>    Audits the player for all objects that match the string.  Ex: @daudit me for north@dkids, @dcontents, @dsiblings, @dparents-----------------------------------------Similar to their non-detailed relatives.  @dsiblings lists all children of the objects parent.Options:  @dbleah <item> with <location/owner>    Appends the owner, or location information to the end of the lines.  Overrides the default.